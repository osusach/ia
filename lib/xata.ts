// Generated by Xata Codegen 0.30.0. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "ai",
    checkConstraints: {
      ai_xata_id_length_xata_id: {
        name: "ai_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
      ai_xata_string_length_contents: {
        name: "ai_xata_string_length_contents",
        columns: ["contents"],
        definition: "CHECK ((length(contents) <= 2048))",
      },
      ai_xata_vector_length_embedding: {
        name: "ai_xata_vector_length_embedding",
        columns: ["embedding"],
        definition: "CHECK ((array_length(embedding, 1) = 1536))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_ai_xata_id_key: {
        name: "_pgroll_new_ai_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "contents",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"string"}',
      },
      {
        name: "embedding",
        type: "vector",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.search.dimension":1536}',
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "scholarships",
    checkConstraints: {
      scholarships_xata_string_length_source: {
        name: "scholarships_xata_string_length_source",
        columns: ["source"],
        definition: "CHECK ((length(source) <= 2048))",
      },
      scholarships_xata_string_length_university: {
        name: "scholarships_xata_string_length_university",
        columns: ["university"],
        definition: "CHECK ((length(university) <= 2048))",
      },
      scholarships_xata_text_length_content: {
        name: "scholarships_xata_text_length_content",
        columns: ["content"],
        definition: "CHECK ((octet_length(content) <= 204800))",
      },
      scholarships_xata_vector_length_embedding: {
        name: "scholarships_xata_vector_length_embedding",
        columns: ["embedding"],
        definition: "CHECK ((array_length(embedding, 1) = 1024))",
      },
      usachScholarships_xata_id_length_xata_id: {
        name: "usachScholarships_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_usachScholarships_xata_id_key: {
        name: "_pgroll_new_usachScholarships_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "content",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "embedding",
        type: "vector",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.search.dimension":1024}',
      },
      {
        name: "source",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"string"}',
      },
      {
        name: "university",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"string"}',
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Ai = InferredTypes["ai"];
export type AiRecord = Ai & XataRecord;

export type Scholarships = InferredTypes["scholarships"];
export type ScholarshipsRecord = Scholarships & XataRecord;

export type DatabaseSchema = {
  ai: AiRecord;
  scholarships: ScholarshipsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: process.env.XATA_URL,
  apiKey: process.env.XATA_API_KEY,
  branch: process.env.XATA_BRANCH,
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
